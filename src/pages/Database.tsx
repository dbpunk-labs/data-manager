import React, { memo, useEffect } from 'react'
import { Button, Form, Input, Modal, Tabs, TabsProps, Typography } from 'antd'
import { PlusCircleOutlined } from '@ant-design/icons'
import { atom, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'
import {
    useContractWrite,
    useNetwork,
    useAccount,
    useContractEvent,
} from 'wagmi'
import { stringToHex } from 'viem'
import { db3MetaStoreContractConfig } from 'db3.js'
import '../styles/Database.scss'
import { chainToNodes } from '../data-context/Config'
import DatabaseManage from '../components/database/DatabaseManage'
import Playground from '../components/database/Playground'
import { usePageContext } from './Context'
import { useAsyncFn } from 'react-use'

const { Paragraph } = Typography

const Database: React.FC<{}> = memo((props) => {
    const { chain } = useNetwork()
    const { address } = useAccount()
    const { networkId } = usePageContext()
    const [createDatabaseLoading, setCreateDatabaseLoading] =
        React.useState(false)
    const [visible, setVisible] = React.useState(false)
    const createDatabaseHandle = useContractWrite(
        {
            address: chainToNodes.find((item) => item.chainId === chain?.id)
                ?.contractAddr,
            abi: db3MetaStoreContractConfig.abi,
            functionName: 'createDocDatabase',
        },
        [chain]
    )

    const unwatch = useContractEvent(
        {
            address: chainToNodes.find((item) => item.chainId === chain?.id)
                ?.contractAddr,
            abi: db3MetaStoreContractConfig.abi,
            eventName: 'CreateDatabase',
            listener(log) {
                if (log[0].args.sender === address) {
                    setCreateDatabaseLoading(false)
                    setVisible(false)
                }
            },
        },
        [address, chain]
    )

    const [newDatabaseAddr, setNewDatabase] = React.useState('')
    const [databaseForm, setDatabaseForm] = React.useState({
        name: '',
        desc: '',
    })

    const items: TabsProps['items'] = [
        {
            key: 'Database',
            label: 'Database',
            children: <DatabaseManage />,
        },
        {
            key: 'Playground',
            label: 'Playground',
            children: <Playground />,
        },
    ]

    return (
        <div className="database">
            <Tabs
                className="db3-tabs"
                items={items}
                tabBarExtraContent={
                    <Button
                        type="primary"
                        icon={<PlusCircleOutlined />}
                        onClick={() => setVisible(true)}
                    >
                        Create Dabase
                    </Button>
                }
            ></Tabs>
            <Modal
                className="db3-modal"
                title="Create Database"
                open={visible}
                onCancel={() => setVisible(false)}
                okText="Create"
                confirmLoading={
                    createDatabaseLoading && !createDatabaseHandle.isError
                }
                onOk={() => {
                    setCreateDatabaseLoading(true)
                    createDatabaseHandle.write({
                        args: [
                            networkId,
                            stringToHex(
                                databaseForm.name + ':' + databaseForm.desc,
                                { size: 32 }
                            ),
                        ],
                    })
                }}
            >
                <Form layout="vertical">
                    <Form.Item label="Database Name" key="k1">
                        <Input
                            value={databaseForm.name}
                            onChange={(e) =>
                                setDatabaseForm({
                                    ...databaseForm,
                                    name: e.target.value,
                                })
                            }
                        />
                    </Form.Item>
                    <Form.Item label="Description" key="k2">
                        <Input
                            value={databaseForm.desc}
                            onChange={(e) =>
                                setDatabaseForm({
                                    ...databaseForm,
                                    desc: e.target.value,
                                })
                            }
                        />
                    </Form.Item>
                    <Form.Item label="Unique database ID" key="k3">
                        <Typography.Text>
                            A unique database address will be generated by
                            system{' '}
                        </Typography.Text>
                        {newDatabaseAddr && (
                            <Paragraph copyable>{newDatabaseAddr}</Paragraph>
                        )}
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    )
})
export default Database
