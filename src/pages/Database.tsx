import React, { memo } from 'react'
import { Button, Form, Input, Modal, Tabs, TabsProps, Typography } from 'antd'
import { PlusCircleOutlined } from '@ant-design/icons'
import { atom, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'
import {
    useContractWrite,
} from 'wagmi'
import '../styles/Database.scss'
import DatabaseManage from '../components/database/DatabaseManage'
import Playground from '../components/database/Playground'
import { usePageContext } from './Context'

const dataRollupNodeStatus = atom({
    key: 'dataRollupNodeStatus',
    default: {},
})
const dataNetwork = atom({
    key: 'dataNetwork',
    default: {},
})

const networkId = atom({
    key: 'networkId',
    default: '0',
})

const Database: React.FC<{}> = memo((props) => {

    const createDatabaseHandle = useContractWrite({
        ...db3MetaStoreContractConfig,
        functionName: 'createDatabase',
    })

    const { client } = usePageContext()

    const [getSystemStatusState, getSystemStatus] = useAsyncFn(async () => {
        if (client) {
            const rollupStatus = await getStorageNodeStatus(client)
            setRollupNodeStatus(rollupStatus)
            setDataNetwork({
                rollupAddress: rollupStatus.evmAccount,
                rollupNodeUrl: rollupStatus.nodeUrl,
                indexAddresses: [indexStatus.evmAccount],
                indexUrls: [indexStatus.nodeUrl],
            })
            if (rollupStatus.hasInited) {
                setNetworkId(rollupStatus.config.networkId)
            }
        }
    }, [client])
    useEffect(() => {
        getSystemStatus()
    }, [client])


    const items: TabsProps['items'] = [
        {
            key: 'Database',
            label: 'Database',
            children: <DatabaseManage />,
        },
        {
            key: 'Playground',
            label: 'Playground',
            children: <Playground />,
        },
    ]

    const [visible, setVisible] = React.useState(false)
    return (
        <div className="database">
            <Tabs
                className="db3-tabs"
                items={items}
                tabBarExtraContent={
                    <Button
                        type="primary"
                        icon={<PlusCircleOutlined />}
                        onClick={() => setVisible(true)}
                    >
                        Create Dabase
                    </Button>
                }
            ></Tabs>
            <Modal
                className="db3-modal"
                title="Create Database"
                open={visible}
                onCancel={() => setVisible(false)}
                okText="Create"
                onOk={() => 
                    createDatabaseHandle.write({
                        args: [
                            rollupNodeStatus.nodeUrl,
                            stringToHex('data network desc', { size: 32 }),
                        ],
                    })
                }
            >
                <Form layout="vertical">
                    <Form.Item label="Database Name">
                        <Input />
                    </Form.Item>
                    <Form.Item label="Description">
                        <Input />
                    </Form.Item>
                    <Form.Item label="Unique database ID">
                        <Typography.Text>
                            A unique database ID will be generated by system{' '}
                        </Typography.Text>
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    )
})
export default Database
